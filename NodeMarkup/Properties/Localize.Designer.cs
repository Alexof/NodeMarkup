//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NodeMarkup {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Localize {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Localize() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NodeMarkup.Properties.Localize", typeof(Localize).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks.
        /// </summary>
        public static string CrosswalkEditor_Crosswalks {
            get {
                return ResourceManager.GetString("CrosswalkEditor_Crosswalks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на crosswalk.
        /// </summary>
        public static string CrossWalkEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("CrossWalkEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на crosswalk.
        /// </summary>
        public static string CrossWalkEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("CrossWalkEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no crosswalks at this intersection yet.
        ///To create a crosswalk hold Shift..
        /// </summary>
        public static string CrosswalkEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("CrosswalkEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the crosswalk&apos;s left border.
        /// </summary>
        public static string CrosswalkEditor_InfoSelectLeftBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_InfoSelectLeftBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the crosswalk&apos;s right border.
        /// </summary>
        public static string CrosswalkEditor_InfoSelectRightBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_InfoSelectRightBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Left border.
        /// </summary>
        public static string CrosswalkEditor_LeftBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_LeftBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line width.
        /// </summary>
        public static string CrosswalkEditor_LineWidth {
            get {
                return ResourceManager.GetString("CrosswalkEditor_LineWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset after.
        /// </summary>
        public static string CrosswalkEditor_OffsetAfter {
            get {
                return ResourceManager.GetString("CrosswalkEditor_OffsetAfter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset before.
        /// </summary>
        public static string CrosswalkEditor_OffsetBefore {
            get {
                return ResourceManager.GetString("CrosswalkEditor_OffsetBefore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset between.
        /// </summary>
        public static string CrosswalkEditor_OffsetBetween {
            get {
                return ResourceManager.GetString("CrosswalkEditor_OffsetBetween", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Parallel to lanes.
        /// </summary>
        public static string CrosswalkEditor_ParallelToLanes {
            get {
                return ResourceManager.GetString("CrosswalkEditor_ParallelToLanes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Right border.
        /// </summary>
        public static string CrosswalkEditor_RightBorder {
            get {
                return ResourceManager.GetString("CrosswalkEditor_RightBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double zebra.
        /// </summary>
        public static string CrosswalkStyle_DoubleZebra {
            get {
                return ResourceManager.GetString("CrosswalkStyle_DoubleZebra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Existing crosswalk.
        /// </summary>
        public static string CrosswalkStyle_Existent {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Existent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalks.
        /// </summary>
        public static string CrosswalkStyle_Group {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Group", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Ladder.
        /// </summary>
        public static string CrosswalkStyle_Ladder {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Ladder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Parallel dashed lines.
        /// </summary>
        public static string CrosswalkStyle_ParallelDashedLines {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ParallelDashedLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Parallel solid lines.
        /// </summary>
        public static string CrosswalkStyle_ParallelSolidLines {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ParallelSolidLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reset.
        /// </summary>
        public static string CrosswalkStyle_ResetBorder {
            get {
                return ResourceManager.GetString("CrosswalkStyle_ResetBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string CrosswalkStyle_Solid {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Solid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Zebra.
        /// </summary>
        public static string CrosswalkStyle_Zebra {
            get {
                return ResourceManager.GetString("CrosswalkStyle_Zebra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activate with key.
        /// </summary>
        public static string EarlyAccess_ActivateButton {
            get {
                return ResourceManager.GetString("EarlyAccess_ActivateButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activation failed.
        /// </summary>
        public static string EarlyAccess_ActivationFailed {
            get {
                return ResourceManager.GetString("EarlyAccess_ActivationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activation success.
        /// </summary>
        public static string EarlyAccess_ActivationSuccess {
            get {
                return ResourceManager.GetString("EarlyAccess_ActivationSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy style.
        /// </summary>
        public static string EarlyAccess_Function_CopyStyle {
            get {
                return ResourceManager.GetString("EarlyAccess_Function_CopyStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste style.
        /// </summary>
        public static string EarlyAccess_Function_PasteStyle {
            get {
                return ResourceManager.GetString("EarlyAccess_Function_PasteStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Perpendicular lines.
        /// </summary>
        public static string EarlyAccess_Function_PerpendicularLines {
            get {
                return ResourceManager.GetString("EarlyAccess_Function_PerpendicularLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This function is unavailable.
        /// </summary>
        public static string EarlyAccess_FunctionUnavailableCaption {
            get {
                return ResourceManager.GetString("EarlyAccess_FunctionUnavailableCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Function «{0}» is currently only available for Patreons early access.
        ///It will be available to everyone later.
        ///By registering early access, you will support the ability to develop this mod at the same speed..
        /// </summary>
        public static string EarlyAccess_FunctionUnavailableMessage {
            get {
                return ResourceManager.GetString("EarlyAccess_FunctionUnavailableMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Get early access.
        /// </summary>
        public static string EarlyAccess_GetButton {
            get {
                return ResourceManager.GetString("EarlyAccess_GetButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your access ID.
        /// </summary>
        public static string EarlyAccess_ID {
            get {
                return ResourceManager.GetString("EarlyAccess_ID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Access key.
        /// </summary>
        public static string EarlyAccess_Key {
            get {
                return ResourceManager.GetString("EarlyAccess_Key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activate.
        /// </summary>
        public static string EarlyAccess_KeyActivateButton {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyActivateButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Early access activation.
        /// </summary>
        public static string EarlyAccess_KeyActivationCaption {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyActivationCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To activate early access you need to enter a key.
        /// </summary>
        public static string EarlyAccess_KeyActivationMessage {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyActivationMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        public static string EarlyAccess_KeyCancelButton {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyCancelButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The key you entered is not valid.
        /// </summary>
        public static string EarlyAccess_KeyNotValid {
            get {
                return ResourceManager.GetString("EarlyAccess_KeyNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link in process....
        /// </summary>
        public static string EarlyAccess_LinkInProcess {
            get {
                return ResourceManager.GetString("EarlyAccess_LinkInProcess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link Patreon account.
        /// </summary>
        public static string EarlyAccess_LinkPatreonButton {
            get {
                return ResourceManager.GetString("EarlyAccess_LinkPatreonButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Link Patreon account.
        /// </summary>
        public static string EarlyAccess_LinkPatreonCaption {
            get {
                return ResourceManager.GetString("EarlyAccess_LinkPatreonCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The Patreon account can&apos;t be linked because you denied access request..
        /// </summary>
        public static string EarlyAccess_PatreonCantLinked {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonCantLinked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An error occurred when linking the account, try again..
        /// </summary>
        public static string EarlyAccess_PatreonLinkedError {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonLinkedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Your account is linked, but you don&apos;t have early access..
        /// </summary>
        public static string EarlyAccess_PatreonLinkedNotMember {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonLinkedNotMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You can close this page and return to the game..
        /// </summary>
        public static string EarlyAccess_PatreonRedirect {
            get {
                return ResourceManager.GetString("EarlyAccess_PatreonRedirect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        public static string EarlyAccess_ProcessCancel {
            get {
                return ResourceManager.GetString("EarlyAccess_ProcessCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Status: {0}.
        /// </summary>
        public static string EarlyAccess_Status {
            get {
                return ResourceManager.GetString("EarlyAccess_Status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activated.
        /// </summary>
        public static string EarlyAccess_StatusActivated {
            get {
                return ResourceManager.GetString("EarlyAccess_StatusActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not activated.
        /// </summary>
        public static string EarlyAccess_StatusNotActivated {
            get {
                return ResourceManager.GetString("EarlyAccess_StatusNotActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Thank you for your support, now you can enjoy all the features..
        /// </summary>
        public static string EarlyAccess_ThanksMessage {
            get {
                return ResourceManager.GetString("EarlyAccess_ThanksMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete {0}.
        /// </summary>
        public static string Editor_DeleteCaption {
            get {
                return ResourceManager.GetString("Editor_DeleteCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to delete {0} {1}?
        ///This action cannot be undone.
        /// </summary>
        public static string Editor_DeleteMessage {
            get {
                return ResourceManager.GetString("Editor_DeleteMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Scroll the wheel to change
        ///Shift X10, Ctrl X0.1.
        /// </summary>
        public static string FieldPanel_ScrollWheel {
            get {
                return ResourceManager.GetString("FieldPanel_ScrollWheel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Angle.
        /// </summary>
        public static string Filler_Angle {
            get {
                return ResourceManager.GetString("Filler_Angle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Angle between.
        /// </summary>
        public static string Filler_AngleBetween {
            get {
                return ResourceManager.GetString("Filler_AngleBetween", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invert.
        /// </summary>
        public static string Filler_Invert {
            get {
                return ResourceManager.GetString("Filler_Invert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset from median.
        /// </summary>
        public static string Filler_MedianOffset {
            get {
                return ResourceManager.GetString("Filler_MedianOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset from lines.
        /// </summary>
        public static string Filler_Offset {
            get {
                return ResourceManager.GetString("Filler_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Step.
        /// </summary>
        public static string Filler_Step {
            get {
                return ResourceManager.GetString("Filler_Step", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Turn.
        /// </summary>
        public static string Filler_Turn {
            get {
                return ResourceManager.GetString("Filler_Turn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на filler.
        /// </summary>
        public static string FillerEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("FillerEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на filler.
        /// </summary>
        public static string FillerEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("FillerEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no fillers at this intersection yet.
        ///To create a filler hold Alt or press {0}..
        /// </summary>
        public static string FillerEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("FillerEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers.
        /// </summary>
        public static string FillerEditor_Fillers {
            get {
                return ResourceManager.GetString("FillerEditor_Fillers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chevron.
        /// </summary>
        public static string FillerStyle_Chevron {
            get {
                return ResourceManager.GetString("FillerStyle_Chevron", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Grid.
        /// </summary>
        public static string FillerStyle_Grid {
            get {
                return ResourceManager.GetString("FillerStyle_Grid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fillers.
        /// </summary>
        public static string FillerStyle_Group {
            get {
                return ResourceManager.GetString("FillerStyle_Group", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string FillerStyle_Solid {
            get {
                return ResourceManager.GetString("FillerStyle_Solid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stripes.
        /// </summary>
        public static string FillerStyle_Stripe {
            get {
                return ResourceManager.GetString("FillerStyle_Stripe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Apply template.
        /// </summary>
        public static string HeaderPanel_ApplyTemplate {
            get {
                return ResourceManager.GetString("HeaderPanel_ApplyTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No templates.
        /// </summary>
        public static string HeaderPanel_NoTemplates {
            get {
                return ResourceManager.GetString("HeaderPanel_NoTemplates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save as template.
        /// </summary>
        public static string HeaderPanel_SaveAsTemplate {
            get {
                return ResourceManager.GetString("HeaderPanel_SaveAsTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Set as default.
        /// </summary>
        public static string HeaderPanel_SetAsDefault {
            get {
                return ResourceManager.GetString("HeaderPanel_SetAsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Unset as default.
        /// </summary>
        public static string HeaderPanel_UnsetAsDefault {
            get {
                return ResourceManager.GetString("HeaderPanel_UnsetAsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add Rule.
        /// </summary>
        public static string LineEditor_AddRuleButton {
            get {
                return ResourceManager.GetString("LineEditor_AddRuleButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Center solid.
        /// </summary>
        public static string LineEditor_CenterSolid {
            get {
                return ResourceManager.GetString("LineEditor_CenterSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Color.
        /// </summary>
        public static string LineEditor_Color {
            get {
                return ResourceManager.GetString("LineEditor_Color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy.
        /// </summary>
        public static string LineEditor_ColorCopy {
            get {
                return ResourceManager.GetString("LineEditor_ColorCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Default.
        /// </summary>
        public static string LineEditor_ColorDefault {
            get {
                return ResourceManager.GetString("LineEditor_ColorDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste.
        /// </summary>
        public static string LineEditor_ColorPaste {
            get {
                return ResourceManager.GetString("LineEditor_ColorPaste", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dash length.
        /// </summary>
        public static string LineEditor_DashedLength {
            get {
                return ResourceManager.GetString("LineEditor_DashedLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на line.
        /// </summary>
        public static string LineEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("LineEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на line.
        /// </summary>
        public static string LineEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("LineEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete rule.
        /// </summary>
        public static string LineEditor_DeleteRuleCaption {
            get {
                return ResourceManager.GetString("LineEditor_DeleteRuleCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to delete the rule?
        ///This action cannot be undone.
        /// </summary>
        public static string LineEditor_DeleteRuleMessage {
            get {
                return ResourceManager.GetString("LineEditor_DeleteRuleMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на There are no lines at this intersection yet.
        ///To create a line connect two points..
        /// </summary>
        public static string LineEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("LineEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на From.
        /// </summary>
        public static string LineEditor_From {
            get {
                return ResourceManager.GetString("LineEditor_From", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the rule&apos;s &quot;From&quot; point.
        /// </summary>
        public static string LineEditor_InfoSelectFrom {
            get {
                return ResourceManager.GetString("LineEditor_InfoSelectFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the rule&apos;s &quot;To&quot; point.
        /// </summary>
        public static string LineEditor_InfoSelectTo {
            get {
                return ResourceManager.GetString("LineEditor_InfoSelectTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invert.
        /// </summary>
        public static string LineEditor_Invert {
            get {
                return ResourceManager.GetString("LineEditor_Invert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Line count.
        /// </summary>
        public static string LineEditor_LineCount {
            get {
                return ResourceManager.GetString("LineEditor_LineCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Lines.
        /// </summary>
        public static string LineEditor_Lines {
            get {
                return ResourceManager.GetString("LineEditor_Lines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset.
        /// </summary>
        public static string LineEditor_Offset {
            get {
                return ResourceManager.GetString("LineEditor_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The rule is overlapped by another rule.
        ///Check other rule&apos;s &quot;From&quot; and &quot;To&quot; points..
        /// </summary>
        public static string LineEditor_RuleOverlappedWarning {
            get {
                return ResourceManager.GetString("LineEditor_RuleOverlappedWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Triangle base.
        /// </summary>
        public static string LineEditor_SharkToothBase {
            get {
                return ResourceManager.GetString("LineEditor_SharkToothBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Triangle height.
        /// </summary>
        public static string LineEditor_SharkToothHeight {
            get {
                return ResourceManager.GetString("LineEditor_SharkToothHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Space between.
        /// </summary>
        public static string LineEditor_SharkToothSpace {
            get {
                return ResourceManager.GetString("LineEditor_SharkToothSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Space length.
        /// </summary>
        public static string LineEditor_SpaceLength {
            get {
                return ResourceManager.GetString("LineEditor_SpaceLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Square side.
        /// </summary>
        public static string LineEditor_SquareSide {
            get {
                return ResourceManager.GetString("LineEditor_SquareSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Style.
        /// </summary>
        public static string LineEditor_Style {
            get {
                return ResourceManager.GetString("LineEditor_Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy.
        /// </summary>
        public static string LineEditor_StyleCopy {
            get {
                return ResourceManager.GetString("LineEditor_StyleCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Paste.
        /// </summary>
        public static string LineEditor_StylePaste {
            get {
                return ResourceManager.GetString("LineEditor_StylePaste", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на To.
        /// </summary>
        public static string LineEditor_To {
            get {
                return ResourceManager.GetString("LineEditor_To", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Width.
        /// </summary>
        public static string LineEditor_Width {
            get {
                return ResourceManager.GetString("LineEditor_Width", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Intersection with {0}.
        /// </summary>
        public static string LineRule_IntersectWith {
            get {
                return ResourceManager.GetString("LineRule_IntersectWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk&apos;s left border.
        /// </summary>
        public static string LineRule_LeftBorder {
            get {
                return ResourceManager.GetString("LineRule_LeftBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk&apos;s right border.
        /// </summary>
        public static string LineRule_RightBorder {
            get {
                return ResourceManager.GetString("LineRule_RightBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Self-edge point {0}.
        /// </summary>
        public static string LineRule_SelfEdgePoint {
            get {
                return ResourceManager.GetString("LineRule_SelfEdgePoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Crosswalk lines.
        /// </summary>
        public static string LineStyle_CrosswalkGroup {
            get {
                return ResourceManager.GetString("LineStyle_CrosswalkGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dashed.
        /// </summary>
        public static string LineStyle_Dashed {
            get {
                return ResourceManager.GetString("LineStyle_Dashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double dashed.
        /// </summary>
        public static string LineStyle_DoubleDashed {
            get {
                return ResourceManager.GetString("LineStyle_DoubleDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double solid.
        /// </summary>
        public static string LineStyle_DoubleSolid {
            get {
                return ResourceManager.GetString("LineStyle_DoubleSolid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Regular lines.
        /// </summary>
        public static string LineStyle_RegularGroup {
            get {
                return ResourceManager.GetString("LineStyle_RegularGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shark teeth.
        /// </summary>
        public static string LineStyle_SharkTeeth {
            get {
                return ResourceManager.GetString("LineStyle_SharkTeeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string LineStyle_Solid {
            get {
                return ResourceManager.GetString("LineStyle_Solid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid and Dashed.
        /// </summary>
        public static string LineStyle_SolidAndDashed {
            get {
                return ResourceManager.GetString("LineStyle_SolidAndDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Solid.
        /// </summary>
        public static string LineStyle_Stop {
            get {
                return ResourceManager.GetString("LineStyle_Stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chess board.
        /// </summary>
        public static string LineStyle_StopChessBoard {
            get {
                return ResourceManager.GetString("LineStyle_StopChessBoard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dashed.
        /// </summary>
        public static string LineStyle_StopDashed {
            get {
                return ResourceManager.GetString("LineStyle_StopDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double solid.
        /// </summary>
        public static string LineStyle_StopDouble {
            get {
                return ResourceManager.GetString("LineStyle_StopDouble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Double dashed.
        /// </summary>
        public static string LineStyle_StopDoubleDashed {
            get {
                return ResourceManager.GetString("LineStyle_StopDoubleDashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Stop lines.
        /// </summary>
        public static string LineStyle_StopGroup {
            get {
                return ResourceManager.GetString("LineStyle_StopGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shark teeth.
        /// </summary>
        public static string LineStyle_StopSharkTeeth {
            get {
                return ResourceManager.GetString("LineStyle_StopSharkTeeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No.
        /// </summary>
        public static string MessageBox_No {
            get {
                return ResourceManager.GetString("MessageBox_No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на OK.
        /// </summary>
        public static string MessageBox_OK {
            get {
                return ResourceManager.GetString("MessageBox_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Yes.
        /// </summary>
        public static string MessageBox_Yes {
            get {
                return ResourceManager.GetString("MessageBox_Yes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на I agree.
        /// </summary>
        public static string Mod_BetaWarningAgree {
            get {
                return ResourceManager.GetString("Mod_BetaWarningAgree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на BETA version warning.
        /// </summary>
        public static string Mod_BetaWarningCaption {
            get {
                return ResourceManager.GetString("Mod_BetaWarningCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Get stable version.
        /// </summary>
        public static string Mod_BetaWarningGetStable {
            get {
                return ResourceManager.GetString("Mod_BetaWarningGetStable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на You are using the BETA version of {0}. It is for testing new features and may contain errors that will break or delete your markings. If you subscribed to it by mistake, then switch to the stable version..
        /// </summary>
        public static string Mod_BetaWarningMessage {
            get {
                return ResourceManager.GetString("Mod_BetaWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Just do make markings at intersections.
        /// </summary>
        public static string Mod_Description {
            get {
                return ResourceManager.GetString("Mod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на This is a BETA version, errors may occur and stability is not guaranteed!.
        /// </summary>
        public static string Mod_DescriptionBeta {
            get {
                return ResourceManager.GetString("Mod_DescriptionBeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Load was completed with errors.
        ///Failed to load markings for {0} intersections..
        /// </summary>
        public static string Mod_LoadFailed {
            get {
                return ResourceManager.GetString("Mod_LoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Czech.
        /// </summary>
        public static string Mod_Locale_cs {
            get {
                return ResourceManager.GetString("Mod_Locale_cs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на German.
        /// </summary>
        public static string Mod_Locale_de {
            get {
                return ResourceManager.GetString("Mod_Locale_de", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на English.
        /// </summary>
        public static string Mod_Locale_en {
            get {
                return ResourceManager.GetString("Mod_Locale_en", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Spanish.
        /// </summary>
        public static string Mod_Locale_es {
            get {
                return ResourceManager.GetString("Mod_Locale_es", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Finnish.
        /// </summary>
        public static string Mod_Locale_fi {
            get {
                return ResourceManager.GetString("Mod_Locale_fi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на French.
        /// </summary>
        public static string Mod_Locale_fr {
            get {
                return ResourceManager.GetString("Mod_Locale_fr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Italian.
        /// </summary>
        public static string Mod_Locale_it {
            get {
                return ResourceManager.GetString("Mod_Locale_it", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Japanese.
        /// </summary>
        public static string Mod_Locale_ja {
            get {
                return ResourceManager.GetString("Mod_Locale_ja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dutch.
        /// </summary>
        public static string Mod_Locale_nl {
            get {
                return ResourceManager.GetString("Mod_Locale_nl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Polish.
        /// </summary>
        public static string Mod_Locale_pl {
            get {
                return ResourceManager.GetString("Mod_Locale_pl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Portuguese.
        /// </summary>
        public static string Mod_Locale_pt {
            get {
                return ResourceManager.GetString("Mod_Locale_pt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Russian.
        /// </summary>
        public static string Mod_Locale_ru {
            get {
                return ResourceManager.GetString("Mod_Locale_ru", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Chinese Simplified.
        /// </summary>
        public static string Mod_Locale_zh_cn {
            get {
                return ResourceManager.GetString("Mod_Locale_zh-cn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Game Language.
        /// </summary>
        public static string Mod_LocaleGame {
            get {
                return ResourceManager.GetString("Mod_LocaleGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Support.
        /// </summary>
        public static string Mod_Support {
            get {
                return ResourceManager.GetString("Mod_Support", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на What&apos;s new in {0}.
        /// </summary>
        public static string Mod_WhatsNewCaption {
            get {
                return ResourceManager.GetString("Mod_WhatsNewCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - &quot;What`s New&quot; message this will pop-up one time after an update and can be disabled in the Options menu.
        ///- Added the following translations:  Czech, Dutch, French, German, Japanese, Polish, Russian, and Spanish (Please contact the mod author to assist with translation into your own language).
        ///- End Points can now be dragged from one to another by holding Ctrl.
        ///- Backups - In the Options menu the marking data on a map can now be backed up by dumping to a file and then importing it. This is necessary if y [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - Fillers. Space between lines can be filled in to indicate the areas prohibited for stopping or driving. 3 styles are available: Lines, Grid and Solid Fill. To create hold Alt.
        ///- Stop lines. It is now possible to connect two points on the same road to create a stop line. 2 available styles: &quot;Solid&quot; and &quot;Dashed&quot;.
        ///- New line style: &quot;Solid &amp; Dashed&quot;.
        ///- Lines and templates in the list now have icons that show style and colour.
        ///- Markings will be now copied when the road is copied with MoveIt (function will [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_2 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - Fix hold Alt, Ctrl and Shift buttons on Mac OS and Linux.
        ///- Added &quot;Double solid&quot; and &quot;Double Dashed&quot; stop line styles.
        ///- Added Italian and Portuguese translations..
        /// </summary>
        public static string Mod_WhatsNewMessage1_2_1 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_2_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - Added new filler style - Chevron (&lt;&lt;&lt;&lt;&lt;).
        ///- Added crosswalks. Hold Shift to create them. Currently available Styles: &quot;Existing crosswalk&quot;, &quot;Zebra&quot;, &quot;Double Zebra&quot;, &quot;Parallel solid lines&quot;, &quot;Parallel dashed lines&quot;, &quot;Ladder&quot;, &quot;Solid&quot;.
        ///- Added perpendicular lines. These lines don&apos;t have second point, they are generated as a straight line from one point. To create perpendicular line, pull the line in the opposite direction from the intersection.
        ///- Added the ability to copy/paste style of lines, fillers, and [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Mod_WhatsNewMessage1_3 {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessage1_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на - Fix chevron line parts overlap.
        ///- New chevron middle line calculation algorithm.
        /// </summary>
        public static string Mod_WhatsNewMessageBeta {
            get {
                return ResourceManager.GetString("Mod_WhatsNewMessageBeta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Version {0}.
        /// </summary>
        public static string Mod_WhatsNewVersion {
            get {
                return ResourceManager.GetString("Mod_WhatsNewVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Edit node #{0} marking.
        /// </summary>
        public static string Panel_Caption {
            get {
                return ResourceManager.GetString("Panel_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на point.
        /// </summary>
        public static string PointEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("PointEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на point.
        /// </summary>
        public static string PointEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("PointEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset.
        /// </summary>
        public static string PointEditor_Offset {
            get {
                return ResourceManager.GetString("PointEditor_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Points.
        /// </summary>
        public static string PointEditor_Points {
            get {
                return ResourceManager.GetString("PointEditor_Points", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Not set.
        /// </summary>
        public static string SelectPanel_NotSet {
            get {
                return ResourceManager.GetString("SelectPanel_NotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        public static string Setting_Cancel {
            get {
                return ResourceManager.GetString("Setting_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Activate tool.
        /// </summary>
        public static string Settings_ActivateTool {
            get {
                return ResourceManager.GetString("Settings_ActivateTool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add new filler.
        /// </summary>
        public static string Settings_AddNewFiller {
            get {
                return ResourceManager.GetString("Settings_AddNewFiller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Add new line rule.
        /// </summary>
        public static string Settings_AddNewLineRule {
            get {
                return ResourceManager.GetString("Settings_AddNewLineRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all node lines.
        /// </summary>
        public static string Settings_DeleteAllNodeLines {
            get {
                return ResourceManager.GetString("Settings_DeleteAllNodeLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete marking from all intersections.
        /// </summary>
        public static string Settings_DeleteMarkingButton {
            get {
                return ResourceManager.GetString("Settings_DeleteMarkingButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Delete all markings.
        /// </summary>
        public static string Settings_DeleteMarkingCaption {
            get {
                return ResourceManager.GetString("Settings_DeleteMarkingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to remove all markings?
        ///This action cannot be undone.
        /// </summary>
        public static string Settings_DeleteMarkingMessage {
            get {
                return ResourceManager.GetString("Settings_DeleteMarkingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump marking data to file.
        /// </summary>
        public static string Settings_DumpMarkingButton {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy path to clipboard.
        /// </summary>
        public static string Settings_DumpMarkingButton1 {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingButton1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на OK.
        /// </summary>
        public static string Settings_DumpMarkingButton2 {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingButton2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump marking data.
        /// </summary>
        public static string Settings_DumpMarkingCaption {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump failed.
        /// </summary>
        public static string Settings_DumpMarkingMessageFailed {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingMessageFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dump success saved.
        /// </summary>
        public static string Settings_DumpMarkingMessageSuccess {
            get {
                return ResourceManager.GetString("Settings_DumpMarkingMessageSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Early access.
        /// </summary>
        public static string Settings_EarlyAccess {
            get {
                return ResourceManager.GetString("Settings_EarlyAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на General.
        /// </summary>
        public static string Settings_General {
            get {
                return ResourceManager.GetString("Settings_General", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group lines.
        /// </summary>
        public static string Settings_GroupLines {
            get {
                return ResourceManager.GetString("Settings_GroupLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group points overlay.
        /// </summary>
        public static string Settings_GroupPoints {
            get {
                return ResourceManager.GetString("Settings_GroupPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Arrange in a circle.
        /// </summary>
        public static string Settings_GroupPointsArrangeCircle {
            get {
                return ResourceManager.GetString("Settings_GroupPointsArrangeCircle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Arrange in a line.
        /// </summary>
        public static string Settings_GroupPointsArrangeLine {
            get {
                return ResourceManager.GetString("Settings_GroupPointsArrangeLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Group templates.
        /// </summary>
        public static string Settings_GroupTemplates {
            get {
                return ResourceManager.GetString("Settings_GroupTemplates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By style.
        /// </summary>
        public static string Settings_GroupTemplatesByStyle {
            get {
                return ResourceManager.GetString("Settings_GroupTemplatesByStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на By type.
        /// </summary>
        public static string Settings_GroupTemplatesByType {
            get {
                return ResourceManager.GetString("Settings_GroupTemplatesByType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Import.
        /// </summary>
        public static string Settings_Import {
            get {
                return ResourceManager.GetString("Settings_Import", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Import marking data from file.
        /// </summary>
        public static string Settings_ImportMarkingButton {
            get {
                return ResourceManager.GetString("Settings_ImportMarkingButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Import marking data.
        /// </summary>
        public static string Settings_ImportMarkingCaption {
            get {
                return ResourceManager.GetString("Settings_ImportMarkingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to import data?
        ///The imported data will replace all existing markup.
        ///This action cannot be undone.
        /// </summary>
        public static string Settings_ImportMarkingMessage {
            get {
                return ResourceManager.GetString("Settings_ImportMarkingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Marking data import failed.
        /// </summary>
        public static string Settings_ImportMarkingMessageFailed {
            get {
                return ResourceManager.GetString("Settings_ImportMarkingMessageFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Marking data successfully imported.
        /// </summary>
        public static string Settings_ImportMarkingMessageSuccess {
            get {
                return ResourceManager.GetString("Settings_ImportMarkingMessageSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Language.
        /// </summary>
        public static string Settings_Language {
            get {
                return ResourceManager.GetString("Settings_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Notifications.
        /// </summary>
        public static string Settings_Notifications {
            get {
                return ResourceManager.GetString("Settings_Notifications", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Other.
        /// </summary>
        public static string Settings_Other {
            get {
                return ResourceManager.GetString("Settings_Other", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Quick rule setup.
        /// </summary>
        public static string Settings_QuickRuleSetup {
            get {
                return ResourceManager.GetString("Settings_QuickRuleSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Render distance.
        /// </summary>
        public static string Settings_RenderDistance {
            get {
                return ResourceManager.GetString("Settings_RenderDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Shortcuts.
        /// </summary>
        public static string Settings_Shortcuts {
            get {
                return ResourceManager.GetString("Settings_Shortcuts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Confirm before deleting.
        /// </summary>
        public static string Settings_ShowDeleteWarnings {
            get {
                return ResourceManager.GetString("Settings_ShowDeleteWarnings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Notification only about major updates.
        /// </summary>
        public static string Settings_ShowOnlyMajor {
            get {
                return ResourceManager.GetString("Settings_ShowOnlyMajor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show tooltips.
        /// </summary>
        public static string Settings_ShowTooltips {
            get {
                return ResourceManager.GetString("Settings_ShowTooltips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Show what&apos;s new.
        /// </summary>
        public static string Settings_ShowWhatsNew {
            get {
                return ResourceManager.GetString("Settings_ShowWhatsNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Troubleshooting.
        /// </summary>
        public static string Settings_Troubleshooting {
            get {
                return ResourceManager.GetString("Settings_Troubleshooting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на New template.
        /// </summary>
        public static string Template_NewTemplate {
            get {
                return ResourceManager.GetString("Template_NewTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Color.
        /// </summary>
        public static string TemplateEditor_Color {
            get {
                return ResourceManager.GetString("TemplateEditor_Color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Dash length.
        /// </summary>
        public static string TemplateEditor_DashedLength {
            get {
                return ResourceManager.GetString("TemplateEditor_DashedLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на template.
        /// </summary>
        public static string TemplateEditor_DeleteCaptionDescription {
            get {
                return ResourceManager.GetString("TemplateEditor_DeleteCaptionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на template.
        /// </summary>
        public static string TemplateEditor_DeleteMessageDescription {
            get {
                return ResourceManager.GetString("TemplateEditor_DeleteMessageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The list of templates is empty.
        ///To create a template, click «{0}» at the line style..
        /// </summary>
        public static string TemplateEditor_EmptyMessage {
            get {
                return ResourceManager.GetString("TemplateEditor_EmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Invert.
        /// </summary>
        public static string TemplateEditor_Invert {
            get {
                return ResourceManager.GetString("TemplateEditor_Invert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Name.
        /// </summary>
        public static string TemplateEditor_Name {
            get {
                return ResourceManager.GetString("TemplateEditor_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Offset.
        /// </summary>
        public static string TemplateEditor_Offset {
            get {
                return ResourceManager.GetString("TemplateEditor_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Space length.
        /// </summary>
        public static string TemplateEditor_SpaceLength {
            get {
                return ResourceManager.GetString("TemplateEditor_SpaceLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Style.
        /// </summary>
        public static string TemplateEditor_Style {
            get {
                return ResourceManager.GetString("TemplateEditor_Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Templates.
        /// </summary>
        public static string TemplateEditor_Templates {
            get {
                return ResourceManager.GetString("TemplateEditor_Templates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Width.
        /// </summary>
        public static string TemplateEditor_Width {
            get {
                return ResourceManager.GetString("TemplateEditor_Width", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Clear node markings.
        /// </summary>
        public static string Tool_ClearMarkingsCaption {
            get {
                return ResourceManager.GetString("Tool_ClearMarkingsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Do you really want to clear all node #{0} markings?
        ///This action cannot be undone.
        /// </summary>
        public static string Tool_ClearMarkingsMessage {
            get {
                return ResourceManager.GetString("Tool_ClearMarkingsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a crosswalk.
        /// </summary>
        public static string Tool_InfoCreateCrosswalk {
            get {
                return ResourceManager.GetString("Tool_InfoCreateCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a line
        ///+Shift - Solid
        ///+Ctrl - Double.
        /// </summary>
        public static string Tool_InfoCreateLine {
            get {
                return ResourceManager.GetString("Tool_InfoCreateLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a perpendicular line
        ///+Shift - Solid
        ///+Ctrl - Double.
        /// </summary>
        public static string Tool_InfoCreateNormalLine {
            get {
                return ResourceManager.GetString("Tool_InfoCreateNormalLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to create a stop line.
        /// </summary>
        public static string Tool_InfoCreateStopLine {
            get {
                return ResourceManager.GetString("Tool_InfoCreateStopLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the crosswalk.
        /// </summary>
        public static string Tool_InfoDeleteCrosswalk {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteCrosswalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the line.
        /// </summary>
        public static string Tool_InfoDeleteLine {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the perpendicular line.
        /// </summary>
        public static string Tool_InfoDeleteNormalLine {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteNormalLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to delete the stop line.
        /// </summary>
        public static string Tool_InfoDeleteStopLine {
            get {
                return ResourceManager.GetString("Tool_InfoDeleteStopLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to finish creating the filler.
        /// </summary>
        public static string Tool_InfoFillerClickEnd {
            get {
                return ResourceManager.GetString("Tool_InfoFillerClickEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to select the next point in the contour.
        /// </summary>
        public static string Tool_InfoFillerClickNext {
            get {
                return ResourceManager.GetString("Tool_InfoFillerClickNext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Click to start creating a filler.
        /// </summary>
        public static string Tool_InfoFillerClickStart {
            get {
                return ResourceManager.GetString("Tool_InfoFillerClickStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select the next point in the contour.
        /// </summary>
        public static string Tool_InfoFillerSelectNext {
            get {
                return ResourceManager.GetString("Tool_InfoFillerSelectNext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a point to start creating the filler.
        /// </summary>
        public static string Tool_InfoFillerSelectStart {
            get {
                return ResourceManager.GetString("Tool_InfoFillerSelectStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Node #{0}
        ///Click to edit marking.
        /// </summary>
        public static string Tool_InfoHoverNode {
            get {
                return ResourceManager.GetString("Tool_InfoHoverNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a node to change marking.
        /// </summary>
        public static string Tool_InfoNode {
            get {
                return ResourceManager.GetString("Tool_InfoNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select endpoint.
        /// </summary>
        public static string Tool_InfoSelectCrosswalkEndPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectCrosswalkEndPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a point to
        ///create or delete a crosswalk.
        /// </summary>
        public static string Tool_InfoSelectCrosswalkStartPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectCrosswalkStartPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select endpoint
        ///+Shift - Solid
        ///+Ctrl - Double.
        /// </summary>
        public static string Tool_InfoSelectLineEndPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLineEndPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select a point to
        ///create or delete a line
        ///+Ctrl to move the point
        ///Hold Alt to create a filler
        ///Hold Shift to create a crosswalk.
        /// </summary>
        public static string Tool_InfoSelectLineStartPoint {
            get {
                return ResourceManager.GetString("Tool_InfoSelectLineStartPoint", resourceCulture);
            }
        }
    }
}
